
* Gstreamer 

** Examples

*** Sample commands
#+begin_src bash
gst-launch -v videotestsrc ! queue ! ffenc_mpeg4 bitrate=800000 ! rtpmp4vpay ! tcpserversink host=<PC_ip> port=5000
#+end_src

*** Web Cam test
#+begin_src bash
gst-launch-1.0 v4l2src ! jpegdec ! xvimagesink
#+end_src


*** Saving video to file


*** Video with RTSP 
#+begin_src bash

#+end_src

** Getting Started

*** How do you find devices for gstreamer
:QUESTIONS:

:END:
:PROPERTIES:

:END:




gst-device-monitor-1.0

*** Generate the pipeline output
#+begin_src bash
export GST_DEBUG_DUMP_DOT_DIR=/tmp/
gst-launch-1.0 audiotestsrc num-buffers=1000 ! fakesink sync=false
#+end_src

This will generate dot files in //tmp/

Reference 

[[https://developer.ridgerun.com/wiki/index.php/How_to_generate_a_Gstreamer_pipeline_diagram_%28graph%29][Generating a pipeline Dot image for Gstreamer]]

*** Inspecting the pipeline

Basic test
#+begin_src bash
gst-launch-1.0 videotestsrc ! ximagesink
#+end_src

*** Error case
#+begin_src bash
gst-launch-1.0 videotestsrc ! "video/x-raw, width=500, height=500", format=GRAY8 ! ximagesink
#+end_src

Output
#+begin_example
Setting pipeline to PAUSED ...
Pipeline is PREROLLING ...
ERROR: from element /GstPipeline:pipeline0/GstVideoTestSrc:videotestsrc0: Internal data stream error.
Additional debug info:
gstbasesrc.c(3072): gst_base_src_loop (): /GstPipeline:pipeline0/GstVideoTestSrc:videotestsrc0:
streaming stopped, reason not-negotiated (-4)
#+end_example

Need to convert the image to a format 

*** Solution
#+begin_src bash
gst-launch-1.0 videotestsrc ! "video/x-raw, width=500, height=500", format=GRAY16_LE ! videoconvert ! ximagesink
#+end_src

*** Inspecting the videotestsrc

#+begin_src bash
gst-inspect-1.0 videotestsrc
#+end_src

*** Inspecting a camera

#+begin_src bash
gst-inspect-1.0 nvarguscam 
#+end_src
*** Adding timeoverlay
#+begin_src bash
gst-launch-1.0 videotestsrc pattern=checkers-8 flip=true \
do-timestamp=true ! timeoverlay halignment=right valignment=bottom \
text="Stream time:" shaded-background=true font-desc="Sans, 24" ! \
video/x-raw, width=500, height=500 ! xvimagesink
#+end_src

** Gstreamer Complex
** Gstreamer commands 
#+begin_src bash
gst-launch-1.0 imxv4l2videosrc fps=30000/1001 num-buffers=1 \ 
! video/x-raw,format=UYVY,width=720,height=480,framerate=30000/1001,interlace-mode=interleaved,device-mode=interleaved \
! vbiread \
    name=vbi_read \
    line-dup-enabled=true \
    line-dup-top-start=3 line-dup-top-stop=33 \
    line-dup-bot-start=433 line-dup-bot-stop=480 \
    first-top-data-line=3 num-top-data-lines=30 \
    first-bot-data-line=433 num-bot-data-lines=37 \
    parse-audio-packets=true \
    set-tff-flag=true \
! imxipuvideotransform deinterlace=true \
! filesink location=/home/root/capture_720x480.uyvy
#+end_src


#+begin_src bash
gst-launch-1.0 videotestsrc pattern = 21 ! "video/x-raw, width=500, height=500", format=I420 ! xvimagesink
#+end_src
*** Listing all plugins
#+begin_src bash
gst-inspect-1.0 --print-all
#+end_src


** RTSP support

*** Build the RTSP Server
#+begin_src bash
git clone git://anongit.freedesktop.org/gstreamer/gst-rtsp-server && cd gst-rtsp-server
git checkout remotes/origin/1.2
./autogen.sh --noconfigure && GST_PLUGINS_GOOD_DIR=$(pkg-config --variable=pluginsdir gstreamer-plugins-bad-1.0) ./configure && make
#+end_src

Notes

- GST_PLUGINS_GOOD_DIR is not set

**** Testing
#+begin_src 
cd examples && ./test-launch "( videotestsrc ! x264enc ! rtph264pay name=pay0 pt=96 )"
#+end_src

**** Sample code
#+begin_src c++
const char* pipeline =  "( tcpclientsrc host=localhost port=4000 "
                        "! multipartdemux "
                        "   boundary=frame "
                        "! seescan-exif-demux "
                        "   do-timestamp=true "
                        "! capsfilter "
                        "   caps=image/jpeg,width=640,height=480,framerate=30/1 "
                        "! rtpjpegpay "
                        "   name=pay0 "
                        "   pt=26 )";
#endif
#+end_src


***** rtpjpegpay

- Encodes JPEG into RTP packets ( RTC-2435 )

- Scans the header for quantization tables

- Motion jpeg through RTSP

** k4 tv support
- [[https://forums.developer.nvidia.com/t/stream-4k-webcam-gstreamer/108025][Link to 4k nvidia Streaming]]
-

** Measuring frame rates

** Webcam Starting
#+begin_src bash
gst-launch-1.0 v4l2src ! jpegdec ! xvimagesink # Get cam video from gstreamer
#+end_src


** Discover video file
#+begin_src bash
gst-discoverer-1.0 -v test1.avi   
#+end_src
#+begin_quote
Analyzing file:///home/jimi_damon/test1.avi                                                                                   
Done discovering file:///home/jimi_damon/test1.avi                                                                            
                                                                                                                              
Topology:                                                                                                                     
  container: video/x-msvideo                                   
    video: video/x-h264, variant=(string)itu, framerate=(fraction)30/1, width=(int)1920, height=(int)1080, interlace-mode=(str
ing)progressive, chroma-format=(string)4:2:0, bit-depth-luma=(uint)8, bit-depth-chroma=(uint)8, parsed=(boolean)true, stream-f
ormat=(string)avc, alignment=(string)au, profile=(string)constrained-baseline, level=(string)1, codec_data=(buffer)0142e00affe
1001a2742e00a898d503c0113f2c2000003000200000300781e2c4b7001000428ce3c80                                                       
      Tags:            
        video codec: ITU H.264 
        bitrate: 10084689                                      
        container format: AVI                                  
                                   
...
Properties:
  Duration: 0:00:05.000000000
  Seekable: yes
  Live: no
  Tags: 
      video codec: ITU H.264
      bitrate: 10084689
      container format: AVI
#+end_quote


** Video tests
#+begin_src bash
gst-launch-1.0 -v videotestsrc ! videorate ! video/x-raw,framerate=30/1 ! videoconvert ! autovideosink
#+end_src


#+begin_src bash
gst-launch-1.0 '( v4l2src device=/dev/video0 ! image/jpeg,width=800,height=600 ! jpegparse ! rtpjpegpay name=pay0 pt=96 )'

#+end_src

$ ./builddir/subprojects/gst-rtsp-server/examples/test-launch 


*** Experiment 

Host 1, jpeg  ->   Host2 decode and display xvideo

**** Host 1

#+begin_src bash
gst-launch-1.0 v4l2src device=/dev/video0 ! jpegenc  ! rtpjpegpay ! tcpserversink host=127.0.0.1 port=4000
#+end_src

**** Host2

Sink works
#+begin_src bash
gst-launch-1.0 tcpclientsrc host=127.0.0.1 port=4000  ! fdsink fd=2

#+end_src


gst-launch-1.0 tcpclientsrc host=127.0.0.1 port=4000  ! rtpjpegdepay ! fdsink fd=2

*** Example2
#+begin_src bash
gst-launch-1.0  v4l2src device=/dev/video0 ! image/jpeg,width=800,height=600 ! jpegparse ! rtpjpegpay name=pay0 pt=96 
#+end_src


*** RTSP stuff

**** Discovery about differences in files

[[https://forums.developer.nvidia.com/t/how-to-send-video-stream-over-udp-network-by-rtp/157602/28?page=2][test-launch.c differences]]

**** 



**** Problems
#+begin_src bash
./test-launch --gst-debug=3 '( videotestsrc ! image/jpeg,width=800,height=600 ! jpegparse ! rtpjpegpay name=pay0 pt=96 ')
#+end_src


Can't connect a videotestsrc to image/jpeg,width=800,height=600



*** Send Receive 

#+begin_src bash
gst-launch-1.0 videotestsrc ! videoconvert ! video/x-raw, format=YUY2 ! jpegenc ! rtpjpegpay ! udpsink host=127.0.0.1 port=5000
#+end_src

#+begin_src bash
gst-launch-1.0 udpsrc port=5000 ! application/x-rtp, media=video, encoding-name=JPEG, framerate=30/1, payload=26, clock-rate=90000 ! rtpjpegdepay ! jpegdec ! videoconvert ! autovideosink

#+end_src


*** VLC SDP file

- [[https://forums.developer.nvidia.com/t/streaming-udp-from-gstreamer-to-vlc/175827/3][Link]]

#+begin_quote
you may try this on receiver end:

gst-launch-1.0 udpsrc port=5000 ! application/x-rtp, payload=26 ! rtpjpegdepay ! jpegdec ! videoconvert ! xvimagesink

For VLC, there might be another way to set payload (maybe a sdp file).
#+end_quote


#+begin_quote
Save this to file test_mjpg.sdp on your mac:

m=video 5000 RTP/AVP 26
c=IN IP4 192.168.0.40
a=rtpmap:26 JPEG/90000
and try to open this file from VLC:

vlc test_mjpg.sdp
#+end_quote


**** Example2 
#+begin_src bash
gst-launch-1.0 v4l2src device=/dev/video0 ! 'image/jpeg,width=640,height=480,framerate=30/1'  ! jpegdecaa  ! fdsink fd=2
#+end_src


gst-launch-1.0 v4l2src device=/dev/video0  ! 'image/jpeg,width=640,height=480,framerate=30/1' ! fdsink fd=2



gst-launch-1.0 v4l2src device=/dev/video0  ! 'image/jpeg,width=640,height=480,framerate=30/1' ! jpegdec ! xvimagesink

#+begin_src bash
gst-launch-1.0 v4l2src device=/dev/video0  ! \
'image/jpeg,width=640,height=480,framerate=30/1' ! \
jpegdec ! \
 timeoverlay  halignment=right valignment=bottom text="Stream time:" shaded-background=true font-desc="Sans, 24"  ! xvimagesink
#+end_src

#
# Adding time
#+begin_src bash
gst-launch-1.0 v4l2src device=/dev/video0  ! \
'image/jpeg,width=640,height=480,framerate=30/1' ! \
jpegdec ! \
 timeoverlay  halignment=right valignment=bottom text="Stream time:" shaded-background=true font-desc="Sans, 24"  ! xvimagesink
#+end_src

#
# Adding date
#
#+begin_src bash
gst-launch-1.0 v4l2src device=/dev/video0  ! \
'image/jpeg,width=640,height=480,framerate=30/1' ! \
jpegdec ! \
 timeoverlay  halignment=right valignment=bottom text="Stream time:" shaded-background=true font-desc="Sans, 24"  ! \
clockoverlay halignment=left valignment=bottom time-format="%Y/%m/%d %H:%M:%S" ! \
xvimagesink


#+end_src

#+begin_src bash
gst-launch-1.0 v4l2src device=/dev/video0  ! \
'image/jpeg,width=640,height=480,framerate=30/1' ! \
jpegdec ! \
timeoverlay  halignment=right valignment=bottom ! \
clockoverlay halignment=left valignment=bottom time-format="%Y/%m/%d %H:%M:%S" ! \
xvimagesink
#+end_src

**** Working example using test-launch.c

#+begin_src bash
test-launch --gst-debug=3 '( v4l2src ! videorate ! capsfilter caps="video/x-raw,framerate=25/2" ! jpegenc ! rtpjpegpay name=pay0 pt=96 )'
#+end_src

***** Can we store information in the video stream so that it's searchable outside of the file 


# BAD
#+begin_src bash
gst-launch-1.0 v4l2src device=/dev/video0 ! 'image/jpeg,width=640,height=480,framerate=30/1' ! 
jpegdec ! 
timeoverlay halignment=right valignment=bottom ! 
clockoverlay halignment=left valignment=bottom time-format="%Y/%m/%d %H:%M:%S" ! 
tee name=t ! 
queue ! 
sdlvideosink t. ! 
queue ! 
videorate ! 
capsfilter caps="video/x-raw-yuv,framerate=1/1" ! 
ffmpegcolorspace ! 
jpegenc ! 
multifilesink location="./Desktop/frames/frame%06d.jpg" 
#+end_src


**** Example4
#+begin_src bash
gst-launch-1.0 v4l2src ! \
  videorate ! \
  capsfilter caps="video/x-raw,framerate=25/2"  ! \
  jpegenc  ! \
  tee name=t ! queue ! multifilesink location="./Desktop/frames/frame%06d.jpg" t. ! queue ! filesink location=jpegoutput.jpg
#+end_src


**** Example3


- [[https://forums.developer.nvidia.com/t/streaming-udp-from-gstreamer-to-vlc/175827/6][Link]]

#+begin_src bash
# Server
gst-launch-1.0 -v v4l2src device=/dev/video1 ! "image/jpeg, width=1920, height-1080, framerate=30/1"a ! rtpjpegpay ! udpsink host=$CLIENT_IP port=5000



#CLIENT:
gst-launch-1.0 udpsrc port=5000 ! application/x-rtp, payload=26 ! rtpjpegdepay ! jpegdec ! videoconvert ! autovideosink
#+end_src

**** SDL Simple Directmedia layer

** Socat Resource

[[https://blog.travismclarke.com/post/socat-tutorial/][Socat Cheat sheet]]


** UDP sink

#+begin_src bash
gst-launch-1.0 -v videotestsrc ! videorate ! video/x-raw,framerate=30/1 ! \
   x264enc tune=zerolatency bitrate=16000000 speed-preset=superfast ! \
   rtph264pay ! udpsink port=5000 host=127.0.0.1
#+end_src

*** How do you connect to udpsink with VLC                                    :question:

#+begin_src bash
vlc -vvv rtp://127.0.0.1:5000 
#+end_src

* References 

- [[https://stackoverflow.com/questions/13744560/using-gstreamer-to-serve-rtsp-stream-working-example-sought][Stack Exchange and Using gstreamer to server RTSP stream]]

